// Generated by CoffeeScript 1.6.1
(function() {
  var __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    _this = this;

  this.Factory = (function() {

    function Factory() {}

    Factory.active = {};

    Factory.inactive = {};

    Factory.spawn = function(klass, config) {
      var old, x;
      if (this.active[klass] === void 0) {
        this.active[klass] = [];
      }
      if (this.inactive[klass] === void 0) {
        this.inactive[klass] = [];
      }
      if (this.inactive[klass].length === 0) {
        this.active[klass].push(new klass(config));
      } else {
        old = this.inactive[klass].pop();
        if (typeof old.revive === "function") {
          old.revive();
        }
        for (x in config) {
          old[x] = config[x];
        }
        this.active[klass].push(old);
      }
      return this.active[klass][this.active[klass].length - 1];
    };

    Factory.sleep = function(instance) {
      var index, old;
      if (instance === void 0) {
        console.log('Factory.sleep(): undefined input');
      }
      index = this.active[instance.constructor].indexOf(instance);
      if (index === -1) {
        console.log('Factory.sleep(): undefined index', instance);
        return this.inactive[instance.constructor].push(instance);
      } else {
        old = this.active[instance.constructor][index];
        if (old === void 0) {
          console.log('Factory.sleep(): undefined old', index, this.active[instance.constructor]);
        }
        if (index === this.active[instance.constructor].length - 1) {
          this.active[instance.constructor].pop();
        } else {
          this.active[instance.constructor][index] = this.active[instance.constructor].pop();
        }
        return this.inactive[instance.constructor].push(old);
      }
    };

    null;

    return Factory;

  })();

  this.Gamescore = (function() {

    function Gamescore() {}

    Gamescore.value = 0;

    Gamescore.increment = 100;

    Gamescore.initialLives = 2;

    Gamescore.lives = Gamescore.initialLives;

    Gamescore.increment_value = function() {
      return this.value += this.increment;
    };

    Gamescore.decrement_value = function() {
      return this.value -= this.increment;
    };

    return Gamescore;

  })();

  this.Utils = (function() {

    function Utils() {}

    Utils.clone = function(obj) {
      var key, temp;
      if (obj === null || typeof obj !== "object") {
        return obj;
      }
      temp = new obj.constructor();
      for (key in obj) {
        temp[key] = Utils.clone(obj[key]);
      }
      return temp;
    };

    Utils.addChainedAttributeAccessor = function(obj, attr) {
      return obj[attr] = function() {
        var newValues;
        newValues = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        if (newValues.length === 0) {
          return obj['_' + attr];
        } else {
          obj['_' + attr] = newValues[0];
          obj.image.attr(attr, obj['_' + attr]);
          return obj;
        }
      };
    };

    Utils.timestamp = function() {
      return (new Date()).getTime() - Date.UTC(1970, 0, 1);
    };

    Utils.angle = function(a) {
      return 2 * Math.PI * a / 360;
    };

    Utils.path_seg = function(p) {
      var a;
      a = p.pathSegTypeAsLetter;
      switch (a) {
        case 'M':
        case 'm':
          return [a, p.x, p.y].join(" ");
        case 'L':
        case 'l':
          return [a, p.x, p.y].join(" ");
        case 'A':
        case 'a':
          return [a, p.r, p.r, p.rot, p.c, p.d, p.x, p.y].join(" ");
        case 'C':
        case 'c':
          return [a, p.x1, p.y1, p.x2, p.y2, p.x, p.y].join(" ");
        case 'S':
        case 's':
          return [a, p.x2, p.y2, p.x, p.y].join(" ");
        case 'Q':
        case 'q':
          return [a, p.x1, p.y1, p.x, p.y].join(" ");
        case 'T':
        case 't':
          return [a, p.x, p.y].join(" ");
        case 'Z':
        case 'z':
          return a;
      }
    };

    Utils.d = function(path) {
      var p;
      return ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = path.length; _i < _len; _i++) {
          p = path[_i];
          _results.push(this.path_seg(p));
        }
        return _results;
      }).call(this)).join(" ");
    };

    Utils.pathTween = function(d, i, a) {
      var interp, prec;
      prec = 4;
      interp = function(d, path) {
        var distances, dt, n0, n1, p, points;
        n0 = path.getTotalLength();
        p = path.cloneNode();
        p.setAttribute("d", d);
        n1 = p.getTotalLength();
        distances = [0];
        i = 0;
        dt = prec / Math.max(n0, n1);
        while ((i += dt) < 1) {
          distances.push(i);
        }
        distances.push(1);
        points = distances.map(function(t) {
          var p0, p1;
          p0 = path.getPointAtLength(t * n0);
          p1 = p.getPointAtLength(t * n1);
          return d3.interpolate([p0.x, p0.y], [p1.x, p1.y]);
        });
        return function(t) {
          if (t < 1) {
            return "M" + points.map(function(p) {
              return p(t);
            }).join("L");
          } else {
            return d;
          }
        };
      };
      return interp(d, this);
    };

    Utils.bilinear_interp = function(matrix, x, y) {
      var dxc, dxf, dyc, dyf, interp, tol, xc, xf, yc, yf;
      tol = 1e-1;
      xf = Math.floor(x);
      xc = Math.ceil(x + tol);
      yf = Math.floor(y);
      yc = Math.ceil(y + tol);
      dxf = x - xf;
      dxc = xc - x;
      dyf = y - yf;
      dyc = yc - y;
      return interp = matrix[yf][xf] * dxc * dyc + matrix[yf][xc] * dxf * dyc + matrix[yc][xf] * dxc * dyf + matrix[yc][xc] * dxf * dyf;
    };

    return Utils;

  })();

  this.Element = (function() {

    function Element(config) {
      this.config = config != null ? config : {};
      this.dt = this.config.dt || 0.4;
      this.r = this.config.r || Factory.spawn(Vec);
      this.dr = this.config.dr || Factory.spawn(Vec);
      this.v = this.config.v || Factory.spawn(Vec);
      this.f = this.config.f || Factory.spawn(Vec);
      this.n = this.config.n || [];
      this.force_param = this.config.force_param || [];
      this.size = this.config.size || 0;
      this.bb_width = this.config.bb_width || 0;
      this.bb_height = this.config.bb_height || 0;
      this.left = this.config.bb_width || 0;
      this.right = this.config.bb_height || 0;
      this.top = this.config.top || 0;
      this.bottom = this.config.bottom || 0;
      this.collision = this.config.collision || true;
      this.tol = this.config.tol || 0.25;
      this._stroke = this.config.stroke || "none";
      this._fill = this.config.fill || "black";
      this.angle = this.config.angle || 0;
      this.is_root = this.config.is_root || false;
      this.is_bullet = this.config.is_bullet || false;
      this.type = this.config.type || null;
      this.image = this.config.image || null;
      this.g = d3.select("#game_g").append("g").attr("transform", "translate(" + this.r.x + "," + this.r.y + ")");
      this.g = this.config.g || this.g;
      this.svg = this.config.svg || d3.select("#game_svg");
      this.game_g = this.config.game_g || d3.select("#game_g");
      this.quadtree = this.config.quadtree || null;
      this.tick = this.config.tick || Physics.verlet(this);
      this.is_destroyed = false;
      this._cleanup = true;
      Utils.addChainedAttributeAccessor(this, 'fill');
      Utils.addChainedAttributeAccessor(this, 'stroke');
      this.start();
    }

    Element.prototype.reaction = function(element) {
      if (element != null) {
        return element.reaction();
      }
    };

    Element.prototype.BB = function() {
      this.left = this.r.x - 0.5 * this.bb_width;
      this.right = this.r.x + 0.5 * this.bb_width;
      this.top = this.r.y - 0.5 * this.bb_height;
      return this.bottom = this.r.y + 0.5 * this.bb_height;
    };

    Element.prototype.draw = function() {
      this.g.attr("transform", "translate(" + this.r.x + "," + this.r.y + ") rotate(" + (360 * 0.5 * this.angle / Math.PI) + ")");
    };

    Element.prototype.destroy_check = function(n) {
      if (this.is_root || this.is_bullet) {
        this.reaction(n);
        return true;
      }
      return false;
    };

    Element.prototype.offscreen = function() {
      return this.r.x < -this.size || this.r.y < -this.size || this.r.x > Game.width + this.size || this.r.y > Game.height + this.size;
    };

    Element.prototype.start = function() {
      if (!(Collision.list.indexOf(this) > -1)) {
        Collision.list.push(this);
      }
    };

    Element.prototype.stop = function() {
      var index, swap;
      index = Collision.list.indexOf(this);
      if (Collision.list.length > 1) {
        swap = Collision.list[index];
        Collision.list[index] = Collision.list[Collision.list.length - 1];
        Collision.list[Collision.list.length - 1] = swap;
      }
      if (index > -1) {
        Collision.list.pop();
      }
    };

    Element.prototype.cleanup = function(_cleanup) {
      this._cleanup = _cleanup != null ? _cleanup : this._cleanup;
      if (this._cleanup && this.offscreen()) {
        this.destroy();
      }
      return this.is_destroyed;
    };

    Element.prototype.destroy = function(remove) {
      if (remove == null) {
        remove = false;
      }
      if (this.is_destroyed) {
        return;
      }
      this.stop();
      this.is_destroyed = true;
      this.g.style('opacity', 0);
      if (remove) {
        this.g.remove();
        this.g = null;
      }
      Factory.sleep(this);
    };

    Element.prototype.revive = function() {
      if (this.g === null) {
        this.g = d3.select("#game_g").append("g").attr("transform", "translate(" + this.r.x + "," + this.r.y + ")");
      }
      this.g.style('opacity', 1);
      this.is_destroyed = false;
      this.r.x = void 0;
      this.r.y = void 0;
      this.v.x = 0;
      this.v.y = 0;
      this.start();
      return this;
    };

    Element.prototype.update = function() {
      this.tick();
      return this.draw();
    };

    return Element;

  })();

  this.Game = (function() {
    var current_height, current_width, get_scale;

    Game.width = null;

    Game.height = null;

    Game.scale = 1;

    current_width = function(padding) {
      var element, x;
      if (padding == null) {
        padding = 8;
      }
      element = window.top.document.body;
      x = $(element).width();
      x = Math.min(x, $(window).width());
      x = Math.min(x, $(window.top).width());
      if (x > padding && padding > 0) {
        return x = x - padding;
      }
    };

    current_height = function(padding) {
      var element, y;
      if (padding == null) {
        padding = 8;
      }
      element = window.top.document.body;
      y = $(element).height();
      y = Math.min(y, $(window).height());
      y = Math.min(y, $(window.top).height());
      if (y > padding && padding > 0) {
        return y = y - padding;
      }
    };

    get_scale = function() {
      var max_scale, min_scale, r1, r2, scale;
      r1 = current_width() / Game.width;
      r2 = current_height() / Game.height;
      scale = r1 <= r2 ? r1 : r2;
      max_scale = 1.0;
      min_scale = 0.39;
      return scale = Math.max(min_scale, Math.min(max_scale, scale));
    };

    Game.prototype.update_window = function(force) {
      var h, scale, tol, w;
      if (force == null) {
        force = false;
      }
      if (Game.width === null || Game.height === null) {
        return Game.scale;
      }
      scale = get_scale();
      tol = .001;
      if (!force) {
        if (Math.abs(Game.scale - scale) < tol) {
          return;
        }
      }
      Game.scale = scale;
      w = Math.ceil(Game.width * scale) + 'px';
      h = Math.ceil(Game.height * scale) + 'px';
      this.div.style('width', w).style('height', h);
      this.svg.style('width', w).style('height', h);
      this.g.attr('transform', 'translate(' + scale * Game.width * 0.5 + ',' + scale * Game.height * 0.5 + ') scale(' + scale + ')' + 'translate(' + -Game.width * 0.5 + ',' + -Game.height * 0.5 + ')');
      $(document.body).css('width', w).css('height', h);
    };

    function Game(config) {
      var force;
      this.config = config != null ? config : {};
      this.element = [];
      this.div = d3.select("#game_div");
      this.svg = d3.select("#game_svg");
      if (this.svg.empty()) {
        this.svg = this.div.append('svg').attr('id', 'game_svg');
      }
      Game.width = 800;
      Game.height = 600;
      this.scale = 1;
      this.g = d3.select("#game_g");
      if (this.g.empty()) {
        this.g = this.svg.append('g');
      }
      this.g.attr('id', 'game_g').attr('width', this.svg.attr('width')).attr('height', this.svg.attr('height')).style('width', '').style('height', '');
      this.update_window(force = true);
    }

    Game.prototype.start = function() {
      return Physics.start(this);
    };

    Game.prototype.stop = function() {
      return Physics.stop();
    };

    Game.prototype.end = function(callback) {
      if (callback == null) {
        callback = function() {};
      }
      if (typeof Gameprez !== "undefined" && Gameprez !== null) {
        Gameprez.end(Gamescore.value, callback);
      } else {
        callback();
      }
      return true;
    };

    Game.prototype.cleanup = function() {
      var element, len, sound, _results;
      len = Collision.list.length;
      _results = [];
      while (len--) {
        element = Collision.list.pop();
        sound = false;
        element.destroy(sound);
        _results.push(element = null);
      }
      return _results;
    };

    return Game;

  })();

  this.Circle = (function(_super) {

    __extends(Circle, _super);

    function Circle(config) {
      var _base;
      this.config = config != null ? config : {};
      (_base = this.config).size || (_base.size = 15);
      Circle.__super__.constructor.call(this, this.config);
      this.type = 'Circle';
      this.BB();
      this.image = this.g.append("circle");
      this.stroke(this._stroke);
      this.fill(this._fill);
    }

    Circle.prototype.draw = function() {
      Circle.__super__.draw.apply(this, arguments);
      return this.image.attr("r", this.size);
    };

    Circle.prototype.BB = function(size) {
      this.size = size != null ? size : this.size;
      this.bb_width = 2 * this.size;
      this.bb_height = 2 * this.size;
      return Circle.__super__.BB.apply(this, arguments);
    };

    return Circle;

  })(Element);

  this.Polygon = (function(_super) {

    __extends(Polygon, _super);

    function Polygon(config) {
      this.config = config != null ? config : {};
      Polygon.__super__.constructor.call(this, this.config);
      this.type = 'Polygon';
      this.path = this.config.path || this.default_path();
      this.image = this.g.append("path");
      this.fill(this._fill);
      this.stroke(this._stroke);
      this.set_path();
    }

    Polygon.prototype.default_path = function() {
      var invsqrt3;
      invsqrt3 = 1 / Math.sqrt(3);
      return [
        {
          pathSegTypeAsLetter: 'M',
          x: -this.size,
          y: this.size * invsqrt3,
          react: true
        }, {
          pathSegTypeAsLetter: 'L',
          x: 0,
          y: -2 * this.size * invsqrt3,
          react: true
        }, {
          pathSegTypeAsLetter: 'L',
          x: this.size,
          y: this.size * invsqrt3,
          react: true
        }, {
          pathSegTypeAsLetter: 'Z'
        }
      ];
    };

    Polygon.prototype.d = function() {
      return Utils.d(this.path);
    };

    Polygon.prototype.polygon_path = function() {
      var i, _i, _ref;
      for (i = _i = 0, _ref = this.path.length - 2; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        this.path[i].r = new Vec(this.path[i]).subtract(this.path[(i + 1) % (this.path.length - 1)]);
        this.path[i].n = new Vec({
          x: -this.path[i].r.y,
          y: this.path[i].r.x
        }).normalize();
      }
      this.BB();
    };

    Polygon.prototype.set_path = function(path) {
      var i, maxd, maxnode, node, _i, _ref;
      this.path = path != null ? path : this.path;
      this.pathref = this.path.map(function(d) {
        return Utils.clone(d);
      });
      this.polygon_path();
      maxnode = this.path[0];
      this.path[0].d = maxnode.x * maxnode.x + maxnode.y * maxnode.y;
      maxd = this.path[0].d;
      for (i = _i = 1, _ref = this.path.length - 2; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        node = this.path[i];
        node.d = node.x * node.x + node.y * node.y;
        if (node.d > maxd) {
          maxnode = this.path[i];
        }
      }
      this.maxnode = new Vec(maxnode);
      this.size = this.maxnode.length();
      return this.image.attr("d", this.d());
    };

    Polygon.prototype.BB = function() {
      var i, xmax, xmin, ymax, ymin, _i, _ref;
      xmax = this.path[0].x;
      ymax = this.path[0].y;
      xmin = xmax;
      ymin = ymax;
      for (i = _i = 1, _ref = this.path.length - 1; 1 <= _ref ? _i < _ref : _i > _ref; i = 1 <= _ref ? ++_i : --_i) {
        if (this.path[i].x > xmax) {
          xmax = this.path[i].x;
        }
        if (this.path[i].x < xmin) {
          xmin = this.path[i].x;
        }
        if (this.path[i].y > ymax) {
          ymax = this.path[i].y;
        }
        if (this.path[i].y < ymin) {
          ymin = this.path[i].y;
        }
      }
      this.bb_width = xmax - xmin;
      this.bb_height = ymax - ymin;
      return Polygon.__super__.BB.apply(this, arguments);
    };

    Polygon.prototype.rotate_path = function() {
      var c, i, s, seg, _i, _ref;
      for (i = _i = 0, _ref = this.path.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        seg = this.path[i];
        if (seg.x == null) {
          continue;
        }
        c = Math.cos(this.angle);
        s = Math.sin(this.angle);
        seg.x = c * this.pathref[i].x - s * this.pathref[i].y;
        seg.y = s * this.pathref[i].x + c * this.pathref[i].y;
      }
      this.polygon_path();
    };

    return Polygon;

  })(Element);

  this.Collision = (function() {
    var circle_circle_dist, circle_lineseg_dist, lineseg_intersect, nearest_node, z_check;

    function Collision() {}

    Collision.use_bb = false;

    Collision.lastquad = Utils.timestamp();

    Collision.list = [];

    Collision.update_quadtree = function(force_update) {
      var data, timestamp;
      if (force_update == null) {
        force_update = false;
      }
      if (!(this.list.length > 0)) {
        return;
      }
      timestamp = Utils.timestamp();
      if (force_update || timestamp - this.lastquad > this.list.length || (this.quadtree == null)) {
        data = this.list.filter(function(d) {
          return d.collision;
        }).map(function(d) {
          return {
            x: d.r.x,
            y: d.r.y,
            d: d
          };
        });
        this.quadtree = d3.geom.quadtree(data);
        this.lastquad = timestamp;
      }
      return this.quadtree;
    };

    Collision.quadtree = Collision.update_quadtree();

    Collision.resolve = function(m, n) {
      var iter, maxiter, reaction, _results;
      maxiter = 32;
      iter = 1;
      reaction = false;
      _results = [];
      while (Collision.check(m, n, reaction) && iter <= maxiter) {
        m.tick();
        n.tick();
        _results.push(iter++);
      }
      return _results;
    };

    Collision.detect = function() {
      var d, i, length, size, x0, x3, y0, y3, _results;
      if (!(this.list.length > 0)) {
        return;
      }
      this.update_quadtree();
      length = this.list.length;
      i = 0;
      _results = [];
      while (i < length) {
        d = this.list[i];
        if (d.collision) {
          size = 2 * (d.size + d.tol);
          x0 = d.r.x - size;
          x3 = d.r.x + size;
          y0 = d.r.y - size;
          y3 = d.r.y + size;
          this.quadtree.visit(function(node, x1, y1, x2, y2) {
            var p;
            p = node.point;
            if (p !== null) {
              if (p.is_destroyed) {
                return false;
              }
              if (!(d !== p.d && p.d.collision)) {
                return false;
              }
              if ((p.x >= x0) && (p.x < x3) && (p.y >= y0) && (p.y < y3)) {
                Collision.check(d, p.d);
              }
            }
            return x1 >= x3 || y1 >= y3 || x2 < x0 || y2 < y0;
          });
        }
        length = this.list.length;
        _results.push(i++);
      }
      return _results;
    };

    Collision.check = function(ei, ej, reaction) {
      var collision, d, m, n, name, reaction_type, sort;
      if (reaction == null) {
        reaction = true;
      }
      name = [ei.type, ej.type];
      sort = [ei.type, ej.type].sort();
      if (name[0] === sort[0] && name[1] === sort[1]) {
        m = ei;
        n = ej;
      } else {
        m = ej;
        n = ei;
      }
      switch (m.type) {
        case 'Circle':
          switch (n.type) {
            case 'Circle':
              d = this.circle_circle(m, n);
              reaction_type = 'circle_circle';
              break;
            case 'Polygon':
              d = this.circle_polygon(m, n);
              reaction_type = 'circle_polygon';
          }
          break;
        case 'Polygon':
          switch (n.type) {
            case 'Polygon':
              d = this.polygon_polygon(m, n);
              reaction_type = 'polygon_polygon';
          }
      }
      if (d.collision && reaction) {
        Reaction[reaction_type](m, n, d);
      }
      collision = d.collision;
      Factory.sleep(d);
      return collision;
    };

    Collision.rectangle_rectangle = function(m, n) {
      var not_intersect;
      m.BB();
      n.BB();
      not_intersect = n.left > m.right || n.right < m.left || n.top > m.bottom || n.bottom < m.top;
      return !not_intersect;
    };

    Collision.circle_circle = function(m, n) {
      var d;
      if (this.use_bb) {
        if (this.rectangle_rectangle(m, n)) {
          d = circle_circle_dist(m, n);
          d.collision = true;
        } else {
          d = {
            collision: false
          };
        }
      } else {
        d = circle_circle_dist(m, n);
        d.collision = d.dist <= d.dmin ? true : false;
      }
      return d;
    };

    Collision.circle_polygon = function(circle, polygon) {
      var d, i, _i, _ref;
      if (this.use_bb) {
        if (this.rectangle_rectangle(circle, polygon)) {
          i = nearest_node(polygon, circle);
          d = circle_lineseg_dist(circle, polygon, i);
          d.i = i;
          d.collision = true;
        } else {
          d = {
            collision: false
          };
        }
      } else {
        for (i = _i = 0, _ref = polygon.path.length - 2; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          if (!polygon.path[i].react) {
            continue;
          }
          d = circle_lineseg_dist(circle, polygon, i);
          if (d.dist > circle.size) {
            continue;
          }
          d.i = i;
          d.collision = true;
          break;
        }
      }
      return d;
    };

    Collision.polygon_polygon = function(m, n) {
      var d, i, j, _i, _j, _ref, _ref1;
      if (this.use_bb) {
        if (this.rectangle_rectangle(m, n)) {
          d = circle_circle_dist(m, n);
          d.i = nearest_node(m, n);
          d.j = nearest_node(n, m);
          d.collision = true;
        } else {
          d = {
            collision: false
          };
        }
      } else {
        d = circle_circle_dist(m, n);
        d.collision = false;
        if (d.dist <= d.dmin) {
          for (i = _i = 0, _ref = m.path.length - 2; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
            for (j = _j = 0, _ref1 = n.path.length - 2; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
              if (!lineseg_intersect(m, n, i, j)) {
                continue;
              }
              d.i = i;
              d.j = j;
              d.collision = true;
              break;
            }
            if (d.collision) {
              break;
            }
          }
        }
      }
      return d;
    };

    nearest_node = function(m, n) {
      var d, i, nn, nnd, node, vec, _i, _ref;
      nn = m.path[0];
      vec = Factory.spawn(Vec, nn).add(m.r).subtract(n.r);
      nnd = vec.length_squared();
      Factory.sleep(vec);
      for (i = _i = 1, _ref = this.path.length - 2; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        node = m.path[i];
        vec = Factory.spawn(Vec, node).add(m.r).subtract(n.r);
        d = vec.length_squared();
        Factory.sleep(vec);
        if (d < nnd) {
          nn = m.path[i];
        }
      }
      return m.path.indexOf(nn);
    };

    circle_circle_dist = function(m, n) {
      var d;
      d = Factory.spawn(Vec, m.r).subtract(n.r);
      d.dist = d.length();
      d.dmin = m.size + n.size;
      return d;
    };

    circle_lineseg_dist = function(circle, polygon, i) {
      var d, dr, r, ri, rj, rr, t, tr;
      ri = polygon.path[i];
      rj = z_check(polygon.path, i);
      r = Factory.spawn(Vec, rj).subtract(ri);
      rr = r.length_squared();
      dr = Factory.spawn(Vec, circle.r).subtract(ri).subtract(polygon.r);
      t = r.dot(dr) / rr;
      Factory.sleep(dr);
      if (t < 0) {

      } else if (t > 1) {
        dr = Factory.spawn(Vec, circle.r).subtract(rj).subtract(polygon.r);
      } else {
        tr = Factory.spawn(Vec, r).scale(t).add(ri).add(polygon.r);
        dr = Factory.spawn(Vec, circle.r).subtract(tr);
        Factory.sleep(tr);
      }
      d = Factory.spawn(Vec, {
        t: t,
        x: dr.x,
        y: dr.y,
        r: [r.x, r.y],
        rr: rr,
        dist: dr.length()
      });
      Factory.sleep(r);
      Factory.sleep(dr);
      return d;
    };

    lineseg_intersect = function(m, n, i, j) {
      var A1, A2, B1, B2, C1, C2, check1, check2, check3, check4, det, ri, rj, si, sj, x, y, _ref, _ref1, _ref2, _ref3;
      ri = Factory.spawn(Vec, m.path[i]);
      rj = Factory.spawn(Vec, z_check(m.path, i));
      si = Factory.spawn(Vec, n.path[j]);
      sj = Factory.spawn(Vec, z_check(n.path, j));
      A1 = rj.y - ri.y;
      B1 = ri.x - rj.x;
      C1 = A1 * (ri.x + m.r.x) + B1 * (ri.y + m.r.y);
      A2 = sj.y - si.y;
      B2 = si.x - sj.x;
      C2 = A2 * (si.x + n.r.x) + B2 * (si.y + n.r.y);
      det = A1 * B2 - A2 * B1;
      if (det === 0) {
        Factory.sleep(ri);
        Factory.sleep(rj);
        Factory.sleep(si);
        Factory.sleep(sj);
        return false;
      }
      x = (B2 * C1 - B1 * C2) / det;
      y = (A1 * C2 - A2 * C1) / det;
      check1 = (Math.min(ri.x, rj.x) - m.tol <= (_ref = x - m.r.x) && _ref <= Math.max(ri.x, rj.x) + m.tol);
      check2 = (Math.min(si.x, sj.x) - n.tol <= (_ref1 = x - n.r.x) && _ref1 <= Math.max(si.x, sj.x) + n.tol);
      check3 = (Math.min(ri.y, rj.y) - m.tol <= (_ref2 = y - m.r.y) && _ref2 <= Math.max(ri.y, rj.y) + m.tol);
      check4 = (Math.min(si.y, sj.y) - n.tol <= (_ref3 = y - n.r.y) && _ref3 <= Math.max(si.y, sj.y) + n.tol);
      Factory.sleep(ri);
      Factory.sleep(rj);
      Factory.sleep(si);
      Factory.sleep(sj);
      if (check1 && check2 && check3 && check4) {
        return true;
      } else {
        return false;
      }
    };

    z_check = function(seg, i) {
      switch (seg[i + 1].pathSegTypeAsLetter) {
        case 'z':
        case 'Z':
          return seg[0];
        default:
          return seg[i + 1];
      }
    };

    return Collision;

  })();

  this.Force = (function() {

    function Force() {}

    Force["eval"] = function(element, param, f) {
      var dr, emx, emy, epx, epy, fx, fy, r2, r3, rmx, rmy, rpx, rpy;
      switch (param.type) {
        case 'constant':
          fx = param.fx;
          fy = param.fy;
          break;
        case 'friction':
          fx = -param.alpha * element.v.x;
          fy = -param.alpha * element.v.y;
          break;
        case 'spring':
          fx = -(element.r.x - param.cx);
          fy = -(element.r.y - param.cy);
          break;
        case 'charge':
        case 'gravity':
          dr = Factory.spawn(Vec, {
            x: param.cx - element.r.x,
            y: param.cy - element.r.y
          });
          r2 = dr.length_squared();
          r3 = r2 * Math.sqrt(r2);
          fx = param.q * dr.x / r3;
          fy = param.q * dr.y / r3;
          Factory.sleep(dr);
          break;
        case 'random':
          fx = 2 * (Math.random() - 0.5) * param.xScale;
          fy = 2 * (Math.random() - 0.5) * param.yScale;
          if (element.r.x > param.xBound) {
            fx = -param.fxBound;
          }
          if (element.r.y > param.yBound) {
            fy = -param.fyBound;
          }
          if (element.r.x < 0) {
            fx = param.fxBound;
          }
          if (element.r.y < 0) {
            fy = param.fyBound;
          }
          break;
        case 'gradient':
          rpx = Factory.spawn(Vec, element.r).add({
            x: param.tol,
            y: 0
          });
          rmx = Factory.spawn(Vec, element.r).add({
            x: -param.tol,
            y: 0
          });
          rpy = Factory.spawn(Vec, element.r).add({
            y: param.tol,
            x: 0
          });
          rmy = Factory.spawn(Vec, element.r).add({
            y: -param.tol,
            x: 0
          });
          epx = param.energy(rpx);
          emx = param.energy(rmx);
          epy = param.energy(rpy);
          emy = param.energy(rmy);
          if (!((epx != null) && (emx != null) && (epy != null) && (emy != null))) {
            fx = 0;
            fy = 0;
            break;
          }
          fx = -0.5 * (epx - emx) / param.tol;
          fy = -0.5 * (epy - emy) / param.tol;
          Factory.sleep(rpx);
          Factory.sleep(rmx);
          Factory.sleep(rpy);
          Factory.sleep(rmy);
      }
      f.x = fx;
      f.y = fy;
      return f;
    };

    return Force;

  })();

  this.Physics = (function() {

    function Physics() {}

    Physics.tick = 1000 / 60;

    Physics.off = false;

    Physics.timestamp = Utils.timestamp();

    Physics.game = null;

    Physics.callbacks = [];

    window.requestAnimFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback, element) {
      return window.setTimeout(callback, this.tick);
    };

    Physics.verlet = function(element) {
      return function() {
        var f, force;
        element.f.scale(0.5 * element.dt * element.dt);
        element.dr.x = element.v.x;
        element.dr.y = element.v.y;
        element.dr.scale(element.dt).add(element.f);
        element.r.add(element.dr);
        if (element.cleanup()) {
          return;
        }
        f = Factory.spawn(Vec, element.f);
        element.f.x = 0;
        element.f.y = 0;
        force = Factory.spawn(Vec);
        element.force_param.forEach(function(param) {
          Force["eval"](element, param, force);
          return element.f.add(force);
        });
        Factory.sleep(force);
        element.v.add(f.add(element.f).scale(0.5 * element.dt));
        Factory.sleep(f);
      };
    };

    Physics.integrate = function(cleanup) {
      var len;
      if (cleanup == null) {
        cleanup = true;
      }
      if (Physics.off) {
        return true;
      }
      requestAnimFrame(Physics.integrate);
      len = Collision.list.length;
      while (len--) {
        Collision.list[len].update();
      }
      Collision.detect();
      return Physics.callbacks.forEach(function(d) {
        return d();
      });
    };

    Physics.start = function(game, delay) {
      if (game == null) {
        game = void 0;
      }
      if (delay == null) {
        delay = 0;
      }
      this.game = game;
      this.off = false;
      this.integrate();
    };

    Physics.stop = function() {
      this.callbacks = [];
      this.off = true;
    };

    return Physics;

  })();

  this.Reaction = (function() {

    function Reaction() {}

    Reaction.circle_circle = function(m, n, d) {
      var line, overstep, shift;
      if (m.destroy_check(n) || n.destroy_check(m)) {
        return;
      }
      line = Factory.spawn(Vec, d);
      line.x = line.x / d.dist;
      line.y = line.y / d.dist;
      overstep = Math.max(d.dmin - d.dist, 0);
      shift = 0.5 * (Math.max(m.tol, n.tol) + overstep);
      Reaction.elastic_collision(m, n, line, shift);
      m.reaction(n);
      Factory.sleep(line);
    };

    Reaction.circle_polygon = function(circle, polygon, d) {
      var intersecting_segment, normal, shift;
      if (circle.destroy_check(polygon) || polygon.destroy_check(circle)) {
        return;
      }
      intersecting_segment = polygon.path[d.i];
      normal = intersecting_segment.n;
      shift = 0.5 * Math.max(circle.tol, polygon.tol);
      Reaction.elastic_collision(circle, polygon, normal, shift);
      console.log('circle_polygon', circle, polygon);
    };

    Reaction.polygon_polygon = function(m, n, d) {
      var dot_a, dot_b, mseg, normal, nseg, segj, shift;
      if (m.destroy_check(n) || n.destroy_check(m)) {
        return;
      }
      mseg = m.path[d.i];
      nseg = n.path[d.j];
      dot_a = mseg.n.dot(d);
      dot_b = nseg.n.dot(d);
      if (Math.abs(dot_a) > Math.abs(dot_b)) {
        normal = Factory.spawn(Vec, mseg.n).scale(dot_a / Math.abs(dot_a));
        segj = nseg;
      } else {
        normal = Factory.spawn(Vec, nseg.n).scale(dot_b / Math.abs(dot_b));
        segj = mseg;
      }
      shift = 0.5 * Math.max(m.tol, n.tol);
      Reaction.elastic_collision(m, n, normal, shift);
      m.reaction(n);
      Factory.sleep(normal);
    };

    Reaction.elastic_collision = function(m, n, line, shift) {
      var cPar, dPar, iter, lshift, maxiter, reaction, uPar, uPerp, vPar, vPerp;
      lshift = Factory.spawn(Vec, line).scale(shift);
      maxiter = 32;
      iter = 1;
      reaction = false;
      while (Collision.check(m, n, reaction) && iter <= maxiter) {
        m.r = m.r.add(lshift);
        n.r = n.r.subtract(lshift);
        iter++;
      }
      cPar = m.v.dot(line);
      vPar = Factory.spawn(Vec, line).scale(cPar);
      vPerp = Factory.spawn(Vec, m.v).subtract(vPar);
      dPar = n.v.dot(line);
      uPar = Factory.spawn(Vec, line).scale(dPar);
      uPerp = Factory.spawn(Vec, n.v).subtract(uPar);
      m.v = uPar.add(vPerp);
      n.v = vPar.add(uPerp);
      Factory.sleep(lshift);
      Factory.sleep(vPar);
      Factory.sleep(vPerp);
      Factory.sleep(uPar);
      Factory.sleep(uPerp);
    };

    return Reaction;

  })();

  this.ForceParam = (function() {

    function ForceParam(config) {
      this.config = config != null ? config : {};
      this.type = this.config.type || 'constant';
      switch (this.type) {
        case 'constant':
          this.fx = this.config.x || 0;
          this.fy = this.config.y || 0;
          break;
        case 'friction':
          this.alpha = this.config.alpha || 1;
          this.vscale = this.config.vscale || .99;
          this.vcut = this.config.vcut || 1e-2;
          break;
        case 'spring':
          this.cx = this.config.cx || 0;
          this.cy = this.config.cy || 0;
          break;
        case 'charge':
        case 'gravity':
          this.cx = this.config.cx || 0;
          this.cy = this.config.cy || 0;
          this.q = this.config.q || 1;
          break;
        case 'random':
          this.xScale = this.config.xScale || 1;
          this.yScale = this.config.yScale || 1;
          this.fxBound = this.config.fxBound || 10;
          this.fyBound = this.config.fyBound || 10;
          break;
        case 'gradient':
          this.tol = this.config.tol || 0.1;
          this.energy = this.config.energy || function(r) {};
      }
    }

    return ForceParam;

  })();

  this.Vec = (function() {

    function Vec(config) {
      this.config = config != null ? config : {};
      this.x = this.config.x || 0;
      this.y = this.config.y || 0;
    }

    Vec.prototype.scale = function(c) {
      this.x *= c;
      this.y *= c;
      return this;
    };

    Vec.prototype.add = function(v) {
      this.x += v.x;
      this.y += v.y;
      return this;
    };

    Vec.prototype.subtract = function(v) {
      this.x -= v.x;
      this.y -= v.y;
      return this;
    };

    Vec.prototype.rotate = function(a) {
      var c, s, _ref;
      c = Math.cos(a);
      s = Math.sin(a);
      _ref = [c * this.x - s * this.y, s * this.x + c * this.y], this.x = _ref[0], this.y = _ref[1];
      return this;
    };

    Vec.prototype.dot = function(v) {
      return this.x * v.x + this.y * v.y;
    };

    Vec.prototype.length_squared = function() {
      return this.dot(this);
    };

    Vec.prototype.length = function() {
      return Math.sqrt(this.length_squared());
    };

    Vec.prototype.normalize = function(length) {
      var inverseLength;
      if (length == null) {
        length = 1;
      }
      inverseLength = length / this.length();
      this.x *= inverseLength;
      this.y *= inverseLength;
      return this;
    };

    Vec.prototype.dist_squared = function(v) {
      var dx, dy;
      dx = this.x - v.x;
      dy = this.y - v.y;
      return dx * dx + dy * dy;
    };

    Vec.prototype.dist = function(v) {
      return Math.sqrt(this.dist_squared(v));
    };

    return Vec;

  })();

  this.Ship = (function() {

    function Ship() {}

    Ship.viper = function() {
      return {
        path: [
          {
            pathSegTypeAsLetter: 'M',
            x: 0,
            y: -24,
            react: true
          }, {
            pathSegTypeAsLetter: 'L',
            x: 24,
            y: 38,
            react: true
          }, {
            pathSegTypeAsLetter: 'L',
            x: 9,
            y: 58,
            react: true
          }, {
            pathSegTypeAsLetter: 'L',
            x: 3,
            y: 48,
            react: true
          }, {
            pathSegTypeAsLetter: 'L',
            x: -3,
            y: 48,
            react: true
          }, {
            pathSegTypeAsLetter: 'L',
            x: -9,
            y: 58,
            react: true
          }, {
            pathSegTypeAsLetter: 'L',
            x: -24,
            y: 38,
            react: true
          }, {
            pathSegTypeAsLetter: 'Z'
          }
        ],
        url: GameAssetsUrl + "viper_1.png",
        offset: {
          x: 0,
          y: 19
        },
        bullet_stroke: 'none',
        bullet_fill: '#90F ',
        bullet_size: 4,
        bullet_speed: 35,
        bullet_tick: 200
      };
    };

    Ship.fang = function() {
      return {
        path: [
          {
            pathSegTypeAsLetter: 'M',
            x: 10,
            y: -20,
            react: true
          }, {
            pathSegTypeAsLetter: 'L',
            x: 30,
            y: -10,
            react: true
          }, {
            pathSegTypeAsLetter: 'L',
            x: 40,
            y: 20,
            react: true
          }, {
            pathSegTypeAsLetter: 'L',
            x: 30,
            y: 50,
            react: true
          }, {
            pathSegTypeAsLetter: 'L',
            x: 15,
            y: 60,
            react: true
          }, {
            pathSegTypeAsLetter: 'L',
            x: 10,
            y: 67,
            react: true
          }, {
            pathSegTypeAsLetter: 'L',
            x: 5,
            y: 70,
            react: true
          }, {
            pathSegTypeAsLetter: 'L',
            x: -5,
            y: 70,
            react: true
          }, {
            pathSegTypeAsLetter: 'L',
            x: -10,
            y: 67,
            react: true
          }, {
            pathSegTypeAsLetter: 'L',
            x: -15,
            y: 60,
            react: true
          }, {
            pathSegTypeAsLetter: 'L',
            x: -30,
            y: 50,
            react: true
          }, {
            pathSegTypeAsLetter: 'L',
            x: -40,
            y: 20,
            react: true
          }, {
            pathSegTypeAsLetter: 'L',
            x: -30,
            y: -10,
            react: true
          }, {
            pathSegTypeAsLetter: 'L',
            x: -10,
            y: -20,
            react: true
          }, {
            pathSegTypeAsLetter: 'L',
            x: -5,
            y: 40,
            react: true
          }, {
            pathSegTypeAsLetter: 'L',
            x: 5,
            y: 40,
            react: true
          }, {
            pathSegTypeAsLetter: 'Z',
            react: true
          }
        ],
        url: GameAssetsUrl + "fang_1.png",
        offset: {
          x: 0,
          y: 25
        },
        bullet_stroke: 'none',
        bullet_fill: '#C00',
        bullet_size: 6,
        bullet_speed: 25,
        bullet_tick: 300
      };
    };

    Ship.sidewinder = function() {
      return {
        path: [
          {
            pathSegTypeAsLetter: 'M',
            x: 8,
            y: -26,
            react: true
          }, {
            pathSegTypeAsLetter: 'L',
            x: 32,
            y: -14,
            react: true
          }, {
            pathSegTypeAsLetter: 'L',
            x: 44,
            y: 18,
            react: true
          }, {
            pathSegTypeAsLetter: 'L',
            x: 32,
            y: 26,
            react: true
          }, {
            pathSegTypeAsLetter: 'L',
            x: 30,
            y: 18,
            react: true
          }, {
            pathSegTypeAsLetter: 'L',
            x: -28,
            y: 18,
            react: true
          }, {
            pathSegTypeAsLetter: 'L',
            x: -32,
            y: 26,
            react: true
          }, {
            pathSegTypeAsLetter: 'L',
            x: -44,
            y: 18,
            react: true
          }, {
            pathSegTypeAsLetter: 'L',
            x: -32,
            y: -14,
            react: true
          }, {
            pathSegTypeAsLetter: 'L',
            x: -8,
            y: -26,
            react: true
          }, {
            pathSegTypeAsLetter: 'L',
            x: -8,
            y: -14,
            react: true
          }, {
            pathSegTypeAsLetter: 'L',
            x: 8,
            y: -14,
            react: true
          }, {
            pathSegTypeAsLetter: 'Z'
          }
        ],
        url: GameAssetsUrl + "sidewinder_1.png",
        offset: {
          x: 0,
          y: 0
        },
        bullet_stroke: 'none',
        bullet_fill: '#099',
        bullet_size: 5,
        bullet_speed: 30,
        bullet_tick: 250
      };
    };

    return Ship;

  })();

  this.Bullet = (function(_super) {

    __extends(Bullet, _super);

    function Bullet(config) {
      this.config = config != null ? config : {};
      Bullet.__super__.constructor.apply(this, arguments);
      this.is_bullet = true;
      this.power = this.config.power || 1;
    }

    Bullet.prototype.destroy_check = function(n) {
      if (n.is_root) {
        return true;
      }
      if (n.is_bullet) {
        if (!this.is_destroyed) {
          n.destroy();
        }
        return true;
      }
      this.destroy();
      n.deplete(this.power);
      if (n.depleted()) {
        Gamescore.increment_value();
        if (typeof Gameprez !== "undefined" && Gameprez !== null) {
          Gameprez.score(Gamescore.value);
        }
        n.destroy();
      }
      return true;
    };

    return Bullet;

  })(Circle);

  this.Drone = (function(_super) {

    __extends(Drone, _super);

    Drone.url = GameAssetsUrl + "drone_1.png";

    function Drone(config) {
      this.config = config != null ? config : {};
      this.config.size = 25;
      Drone.__super__.constructor.call(this, this.config);
      this.stop();
      this.max_speed = 12;
      this.energy = this.config.energy || 1;
      this.image.remove();
      this.g.attr("class", "drone");
      this.image = this.g.append("image").attr("xlink:href", Drone.url).attr("x", -this.size).attr("y", -this.size).attr("width", this.size * 2).attr("height", this.size * 2);
    }

    Drone.prototype.deplete = function(power) {
      var dur, fill, fill0, last;
      if (power == null) {
        power = 1;
      }
      this.energy = this.energy - power;
      dur = 50;
      fill0 = '#300';
      fill = "#FF0";
      last = this.g.select('circle:last-child');
      if (last !== this.image) {
        last.remove();
      }
      this.g.append("circle").attr("r", this.size * .9).attr("x", 0).attr("y", 0).style("fill", fill0).style('opacity', 0).transition().duration(dur).ease('sqrt').style('opacity', 0.6).transition().duration(dur).ease('linear').style('fill', fill).transition().duration(dur).ease('linear').style('opacity', (1 - this.energy / this.config.energy) * .4);
      return Game.sound.play('shot');
    };

    Drone.prototype.depleted = function() {
      if (this.energy <= 0) {
        return true;
      } else {
        return false;
      }
    };

    Drone.prototype.destroy = function(sound, remove) {
      var dur;
      if (sound == null) {
        sound = true;
      }
      if (remove == null) {
        remove = false;
      }
      Drone.__super__.destroy.call(this, remove);
      dur = 500;
      this.g.append('circle').attr("r", this.size * .9).attr("x", 0).attr("y", 0).style('fill', '#800').style('opacity', .7).transition().duration(dur).attr('transform', 'scale(5)').remove();
      this.g.attr("class", "").transition().duration(dur).style("opacity", "0").remove();
      if (sound) {
        return Game.sound.play('boom');
      }
    };

    Drone.prototype.draw = function() {
      this.angle = -Math.atan2(this.f.x, this.f.y);
      if (this.v.length() > this.max_speed) {
        this.v.normalize(this.max_speed);
      }
      return Drone.__super__.draw.apply(this, arguments);
    };

    Drone.prototype.offscreen = function() {
      var dr2, dx, dy, scale;
      dx = this.r.x - Game.width * 0.5;
      dy = this.r.y - Game.height * 0.5;
      dr2 = dx * dx + dy * dy;
      scale = .8;
      if (dr2 > Game.height * Game.height * 0.25 * scale * scale) {
        scale = .01;
        Force["eval"](this, this.force_param[0], this.f);
        this.v.add(this.f.normalize(this.max_speed * scale));
      }
      return false;
    };

    return Drone;

  })(Circle);

  this.Dronewar = (function(_super) {

    __extends(Dronewar, _super);

    Dronewar.bg_img = GameAssetsUrl + 'space_background.jpg';

    function Dronewar() {
      var img,
        _this = this;
      this.reset = function() {
        return Dronewar.prototype.reset.apply(_this, arguments);
      };
      this.progress = function() {
        return Dronewar.prototype.progress.apply(_this, arguments);
      };
      this.keydown = function() {
        return Dronewar.prototype.keydown.apply(_this, arguments);
      };
      Dronewar.__super__.constructor.apply(this, arguments);
      this.svg.style("background-image", 'url(' + Dronewar.bg_img + ')').style('background-size', '100%');
      this.max_score_increment = 500000;
      this.initialN = this.config.initialN || 2;
      this.N = this.initialN;
      this.root = Factory.spawn(Root);
      this.scoretxt = this.g.append("text").text("").attr("stroke", "none").attr("fill", "white").attr("font-size", "18").attr("x", "20").attr("y", "40").attr('font-family', 'arial bold');
      this.lives = this.g.append("text").text("").attr("stroke", "none").attr("fill", "white").attr("font-size", "18").attr("x", "20").attr("y", "20").attr('font-family', 'arial bold');
      this.leveltxt = this.g.append("text").text("").attr("stroke", "none").attr("fill", "white").attr("font-size", "18").attr("x", "20").attr("y", "60").attr('font-family', 'arial bold');
      d3.select(window.top).on("keydown", this.keydown);
      if (window !== window.top) {
        d3.select(window).on("keydown", this.keydown);
      }
      img = new Image();
      img.src = Ship.viper().url;
      img.src = Ship.sidewinder().url;
      img.src = Ship.fang().url;
      img.src = Drone.url;
      Game.sound = new Howl({
        urls: [GameAssetsUrl + 'dronewar.mp3', GameAssetsUrl + 'dronewar.ogg'],
        sprite: {
          music: [0, 10782],
          boom: [10782, 856],
          shot: [11639, 234]
        }
      });
      Game.sound.play('music');
    }

    Dronewar.prototype.level = function() {
      var Nlevel, dur, i, multiplier, n, newAttacker, offset, _i, _ref,
        _this = this;
      this.svg.style("cursor", "none");
      this.element = [];
      Nlevel = this.N - this.initialN + 1;
      multiplier = 10;
      offset = 50;
      for (i = _i = 0, _ref = this.N - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        newAttacker = Factory.spawn(Drone, {
          energy: Nlevel * multiplier + offset
        });
        this.element.push(newAttacker);
        this.element[i].r.x = Game.width * 0.5 + (Math.random() - 0.5) * 0.5 * Game.width;
        this.element[i].r.y = Game.height * 0.25 + Math.random() * 0.25 * Game.height;
        this.element[i].draw();
      }
      n = this.element.length * 2;
      this.speed = .04 + Gamescore.value / 1000000;
      dur = 300 + 200 / (100 + Gamescore.value);
      d3.selectAll(".drone").data(this.element).style("opacity", 0).transition().delay(function(d, i) {
        return i * dur;
      }).duration(dur * 4).style("opacity", 1).each('end', function(d) {
        var d1, dx, dy;
        dx = _this.root.r.x - d.r.x;
        dy = _this.root.r.y - d.r.y;
        d1 = Math.sqrt(dx * dx + dy * dy);
        dx /= d1;
        dy /= d1;
        d.v.x = _this.N * dx * _this.speed;
        d.v.y = _this.N * dy * _this.speed;
        return d.start();
      });
    };

    Dronewar.prototype.update_drone = function() {
      var drone, _i, _len, _ref;
      if (!(this.element.length > 0)) {
        return;
      }
      this.param = {
        type: 'charge',
        cx: this.root.r.x,
        cy: this.root.r.y,
        q: this.root.charge * 500 * this.speed * this.speed
      };
      _ref = this.element;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        drone = _ref[_i];
        drone.force_param[0] = this.param;
      }
    };

    Dronewar.prototype.keydown = function() {
      switch (d3.event.keyCode) {
        case 39:
          this.root.angle += this.root.angleStep;
          this.root.draw([this.root.r.x, this.root.r.y]);
          break;
        case 37:
          this.root.angle -= this.root.angleStep;
          this.root.draw([this.root.r.x, this.root.r.y]);
          break;
        case 40:
        case 38:
          this.root.angle += Math.PI;
          this.root.draw([this.root.r.x, this.root.r.y]);
          break;
        case 82:
          if (Gamescore.lives < 0) {
            this.reset();
          }
      }
    };

    Dronewar.prototype.stop = function() {
      var callback,
        _this = this;
      Dronewar.__super__.stop.apply(this, arguments);
      this.root.stop();
      callback = function() {
        _this.lives.text("GAME OVER, PRESS 'R' OR CLICK/TOUCH HERE TO RESTART").on('click', _this.reset);
        return true;
      };
      this.end(callback);
    };

    Dronewar.prototype.start = function() {
      var dur, fang, go, how, prompt, root, sidewinder, title, viper,
        _this = this;
      this.root.draw();
      this.root.stop();
      title = this.g.append("text").text("").attr("stroke", "none").attr("fill", "white").attr("font-size", "48").attr("x", Game.width / 2 - 320).attr("y", 90).attr('font-family', 'arial').attr('font-weight', 'bold');
      title.text("DRONEWAR");
      prompt = this.g.append("text").text("").attr("stroke", "none").attr("fill", "white").attr("font-size", "36").attr("x", Game.width / 2 - 320).attr("y", Game.height / 4 + 40).attr('font-family', 'arial').attr('font-weight', 'bold');
      prompt.text("SELECT SHIP");
      root = this.root;
      sidewinder = this.g.append("text").text("").attr("stroke", "none").attr("fill", "white").attr("font-size", "24").attr("x", Game.width / 2 - 320).attr("y", Game.height / 4 + 80).attr('font-family', 'arial').attr('font-weight', 'bold').style("cursor", "pointer");
      sidewinder.text("SIDEWINDER").style("fill", "#099");
      dur = 500;
      sidewinder.on("click", function() {
        if (this.style.fill === '#000996') {
          return;
        }
        root.ship(Ship.sidewinder());
        d3.select(this).transition().duration(dur).style("fill", "#099");
        viper.style("fill", "#FFF");
        return fang.style("fill", "#FFF");
      });
      viper = this.g.append("text").text("").attr("stroke", "none").attr("fill", "white").attr("font-size", "24").attr("x", Game.width / 2 - 320).attr("y", Game.height / 4 + 110).attr('font-family', 'arial').attr('font-weight', 'bold').style("cursor", "pointer");
      viper.text("VIPER");
      viper.on("click", function() {
        if (this.style.fill === '#000996') {
          return;
        }
        root.ship(Ship.viper());
        d3.select(this).transition().duration(dur).style("fill", "#099");
        sidewinder.style("fill", "#FFF");
        return fang.style("fill", "#FFF");
      });
      fang = this.g.append("text").text("").attr("stroke", "none").attr("fill", "white").attr("font-size", "24").attr("x", Game.width / 2 - 320).attr("y", Game.height / 4 + 140).attr('font-family', 'arial').attr('font-weight', 'bold').style("cursor", "pointer");
      fang.text("FANG");
      fang.on("click", function() {
        if (this.style.fill === '#000996') {
          return;
        }
        root.ship(Ship.fang());
        d3.select(this).transition().duration(dur).style("fill", "#099");
        viper.style("fill", "#FFF");
        return sidewinder.style("fill", "#FFF");
      });
      go = this.g.append("text").text("").attr("stroke", "none").attr("fill", "#FF2").attr("font-size", "36").attr("x", this.root.r.x - 60).attr("y", this.root.r.y + 100).attr('font-family', 'arial').attr('font-weight', 'bold').style("cursor", "pointer");
      go.text("START");
      go.on("click", function() {
        dur = 500;
        title.transition().duration(dur).style("opacity", 0).remove();
        prompt.transition().duration(dur).style("opacity", 0).remove();
        sidewinder.transition().duration(dur).style("opacity", 0).remove();
        viper.transition().duration(dur).style("opacity", 0).remove();
        fang.transition().duration(dur).style("opacity", 0).remove();
        go.transition().duration(dur).style("opacity", 0).remove();
        how.transition().duration(dur).style("opacity", 0).remove();
        _this.root.start();
        Gamescore.value = 0;
        if (typeof Gameprez !== "undefined" && Gameprez !== null) {
          Gameprez.start(_this.max_score_increment);
        }
        return _this.progress();
      });
      how = this.g.append("text").text("").attr("stroke", "none").attr("fill", "white").attr("font-size", "18").attr("x", Game.width / 2 - 320).attr("y", this.root.r.y + 130).attr('font-family', 'arial').attr('font-weight', 'bold').style("cursor", "pointer");
      how.text("Use mouse or touch for controlling movement, scrollwheel/drag for rotation");
      Game.sound.play('music');
      Dronewar.__super__.start.apply(this, arguments);
    };

    Dronewar.prototype.progress = function() {
      var all_is_destroyed, dur;
      this.update_drone();
      this.scoretxt.text('SCORE: ' + Gamescore.value);
      this.leveltxt.text('LEVEL: ' + (this.N - this.initialN + 1));
      if (Gamescore.lives >= 0) {
        this.lives.text('LIVES: ' + Gamescore.lives);
      } else {
        dur = 420;
        this.root.game_over(dur);
        this.stop();
        return true;
      }
      all_is_destroyed = this.element.every(function(element) {
        return element.is_destroyed;
      });
      if (all_is_destroyed) {
        this.N++;
        this.charge *= 10;
        this.level();
      }
      requestAnimFrame(this.progress);
    };

    Dronewar.prototype.reset = function() {
      this.cleanup();
      this.g.selectAll("g").remove();
      this.lives.text("");
      this.scoretxt.text("");
      this.leveltxt.text("");
      this.svg.style("cursor", "auto");
      this.N = this.initialN;
      this.root = Factory.spawn(Root);
      Gamescore.lives = Gamescore.initialLives;
      this.start();
    };

    return Dronewar;

  })(Game);

  this.Root = (function(_super) {

    __extends(Root, _super);

    function Root(config) {
      var _this = this;
      this.config = config != null ? config : {
        size: 0
      };
      this.fire = function() {
        return Root.prototype.fire.apply(_this, arguments);
      };
      this.dragspin = function() {
        return Root.prototype.dragspin.apply(_this, arguments);
      };
      this.spin = function() {
        return Root.prototype.spin.apply(_this, arguments);
      };
      this.redraw_interp = function(xy) {
        if (xy == null) {
          xy = d3.mouse(_this.game_g.node());
        }
        return Root.prototype.redraw_interp.apply(_this, arguments);
      };
      this.redraw = function(xy) {
        if (xy == null) {
          xy = d3.mouse(_this.game_g.node());
        }
        return Root.prototype.redraw.apply(_this, arguments);
      };
      Root.__super__.constructor.call(this, this.config);
      this.is_root = true;
      this.r.x = Game.width / 2;
      this.r.y = Game.height - 180;
      this.angleStep = 2 * Math.PI / 60;
      this.lastfire = Utils.timestamp();
      this.charge = 5e4;
      this.stroke("none");
      this.fill("#000");
      this.bitmap = this.g.insert("image", 'path').attr('id', 'ship_image');
      this.ship();
      this.tick = function() {};
      this.drawing = false;
    }

    Root.prototype.redraw = function(xy) {
      var maxJump;
      if (xy == null) {
        xy = d3.mouse(this.game_g.node());
      }
      if (!this.collision) {
        return;
      }
      maxJump = 30;
      xy = this.apply_limits(xy);
      if (Math.abs(this.r.x - xy[0]) > maxJump || Math.abs(this.r.y - xy[1]) > maxJump) {
        this.redraw_interp(xy);
        return;
      }
      this.r.x = xy[0];
      this.r.y = xy[1];
    };

    Root.prototype.apply_limits = function(xy) {
      return [Math.min(Math.max(this.bb_width, xy[0]), Game.width - this.bb_width), Math.min(Math.max(this.bb_height, xy[1]), Game.height - this.bb_height)];
    };

    Root.prototype.redraw_interp = function(xy) {
      var Nstep, count, dr, r1, redraw_func, step,
        _this = this;
      if (xy == null) {
        xy = d3.mouse(this.game_g.node());
      }
      if (!this.collision) {
        return;
      }
      if (this.drawing) {
        return;
      }
      this.drawing = true;
      r1 = Factory.spawn(Vec, {
        x: xy[0],
        y: xy[1]
      });
      step = 20;
      dr = Factory.spawn(Vec, r1).subtract(this.r);
      Nstep = Math.floor(dr.length() / step);
      count = 1;
      dr.normalize(step);
      redraw_func = function() {
        if (count > Nstep) {
          return _this.drawing = false;
        } else {
          if (_this.r.x > 0 && _this.r.x < Game.width && _this.r.y > 0 && _this.r.y < Game.height) {
            _this.r.add(dr);
          }
          count++;
          return requestAnimFrame(redraw_func);
        }
      };
      redraw_func();
    };

    Root.prototype.spin = function() {
      var delta;
      delta = this.angleStep * d3.event.wheelDelta / Math.abs(d3.event.wheelDelta);
      this.angle = this.angle - delta;
      this.rotate_path();
    };

    Root.prototype.dragspin = function() {
      var delta, deltax, deltay;
      deltay = this.angleStep * Math.ceil(d3.event.dy) / Math.abs(Math.ceil(d3.event.dy));
      if (isNaN(deltay)) {
        deltay = 0;
      }
      deltax = this.angleStep * Math.ceil(d3.event.dx) / Math.abs(Math.ceil(d3.event.dx));
      if (isNaN(deltax)) {
        deltax = 0;
      }
      delta = Math.abs(deltay) > Math.abs(deltax) ? deltay : deltax;
      this.angle = this.angle - delta;
      this.rotate_path();
    };

    Root.prototype.fire = function() {
      var timestamp;
      if (this.is_destroyed) {
        return true;
      }
      timestamp = Utils.timestamp();
      if (!(this.collision && timestamp - this.lastfire >= this.wait)) {
        return;
      }
      this.lastfire = timestamp;
      this.shoot();
    };

    Root.prototype.shoot = function() {
      var bullet, x, y;
      x = Math.cos(this.angle - Math.PI * 0.5);
      y = Math.sin(this.angle - Math.PI * 0.5);
      bullet = Factory.spawn(Bullet, {
        power: this.bullet_size * this.bullet_size,
        size: this.bullet_size
      });
      bullet.r.x = this.r.x + x * (this.size / 3 + this.bullet_size);
      bullet.r.y = this.r.y + y * 20;
      bullet.v.x = this.bullet_speed * x;
      bullet.v.y = this.bullet_speed * y;
      bullet.stroke(this.bullet_stroke);
      bullet.fill(this.bullet_fill);
      return bullet;
    };

    Root.prototype.ship = function(ship, dur) {
      var endPath,
        _this = this;
      if (ship == null) {
        ship = Ship.sidewinder();
      }
      if (dur == null) {
        dur = 500;
      }
      this.collision = false;
      this.bullet_stroke = ship.bullet_stroke;
      this.bullet_fill = ship.bullet_fill;
      this.bullet_size = ship.bullet_size;
      this.bullet_speed = ship.bullet_speed / this.dt;
      this.wait = ship.bullet_tick;
      this.path = ship.path;
      this.BB();
      endPath = this.d();
      this.bitmap.attr('opacity', 1).transition().duration(dur * 0.5).attr('opacity', 0).remove();
      this.image.attr("opacity", 1).data([endPath]).transition().duration(dur).attrTween("d", Utils.pathTween).transition().duration(dur * 0.5).attr("opacity", 0);
      return this.bitmap.attr("xlink:href", ship.url).attr("x", -this.bb_width * 0.5 + ship.offset.x).attr("y", -this.bb_height * 0.5 + ship.offset.y).attr("width", this.bb_width).attr("height", this.bb_height).attr("opacity", 0).transition().delay(dur).duration(dur).attr("opacity", 1).each('end', function() {
        _this.set_path();
        _this.collision = true;
        return Physics.callbacks.push(_this.fire);
      });
    };

    Root.prototype.start = function() {
      Root.__super__.start.apply(this, arguments);
      this.svg.on("mousemove", this.redraw);
      this.svg.on("mousewheel", this.spin);
      return this.svg.call(d3.behavior.drag().origin(Object).on("drag", this.dragspin));
    };

    Root.prototype.stop = function() {
      Root.__super__.stop.apply(this, arguments);
      this.svg.on("mousemove", null);
      this.svg.on("mousewheel", null);
      return this.svg.call(d3.behavior.drag().origin(Object).on("drag", null));
    };

    Root.prototype.reaction = function(n) {
      var N, dur, fill;
      if (n.is_bullet) {
        return;
      }
      Gamescore.lives -= 1;
      n.destroy();
      N = 240;
      fill = '#ff0';
      dur = 120;
      return this.image.transition().duration(dur / 5).attr('opacity', 1).transition().duration(dur).ease('sqrt').attr("fill", fill).transition().duration(dur).ease('linear').attr("fill", this.fill()).transition().duration(dur / 5).attr('opacity', 0);
    };

    Root.prototype.game_over = function(dur) {
      var _this = this;
      if (dur == null) {
        dur = 500;
      }
      this.image.transition().duration(dur / 5).attr('opacity', 1).transition().duration(dur).attr("fill", "#900").transition().duration(dur * 0.25).ease('sqrt').style("opacity", 0);
      return this.bitmap.transition().duration(dur).attr('opacity', 0).each('end', function() {
        return _this.destroy();
      });
    };

    return Root;

  })(Polygon);

}).call(this);
